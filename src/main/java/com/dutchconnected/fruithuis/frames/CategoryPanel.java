/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dutchconnected.fruithuis.frames;

import com.dutchconnected.fruithuis.Category;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.event.EventListenerList;

/**
 *
 * @author admin
 */
public class CategoryPanel extends javax.swing.JPanel {

    private final Category category;

    public Category getCategory() {
        return category;
    }

    /**
     * Creates new form CategoryPanel
     */
    public CategoryPanel(Category category) {
        this.category = category;initComponents();
        setBytes(category.getImage());
    }

    public void setBytes(byte[] arr) {
		if(arr == null || arr.length == 0) {
			icon.setIcon(null);
			return;
		}
		try(ByteArrayInputStream in = new ByteArrayInputStream(arr)) {
			icon.setIcon(new ImageIcon(ImageIO.read(in)));
		} catch (IOException ex) {
			Logger.getLogger(ImageEditor.class.getName()).log(Level.SEVERE, null, ex);
		}
		
	}
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        icon = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        open = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 0.1;
        add(icon, gridBagConstraints);

        name.setText(this.category.getName());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(name, gridBagConstraints);

        open.setText("Bekijken");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(open, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        this.fireActionPerformed(evt);
    }//GEN-LAST:event_openActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel icon;
    private javax.swing.JLabel name;
    private javax.swing.JButton open;
    // End of variables declaration//GEN-END:variables

    private final List<ActionListener> listeners = new CopyOnWriteArrayList<ActionListener>();
    
    /**
     * Adds an <code>ActionListener</code> to the button.
     * @param l the <code>ActionListener</code> to be added
     */
    public void addActionListener(ActionListener l) {
        listeners.add( l);
    }

    /**
     * Removes an <code>ActionListener</code> from the button.
     * If the listener is the currently set <code>Action</code>
     * for the button, then the <code>Action</code>
     * is set to <code>null</code>.
     *
     * @param l the listener to be removed
     */
    public void removeActionListener(ActionListener l) {
       listeners.remove( l);
    }
    
    /**
     * Notifies all listeners that have registered interest for
     * notification on this event type.  The event instance
     * is lazily created using the <code>event</code>
     * parameter.
     *
     * @param event  the <code>ActionEvent</code> object
     * @see EventListenerList
     */
    protected void fireActionPerformed(ActionEvent event) {
        Iterator<ActionListener> itr = listeners.iterator();
        if(itr.hasNext()) {
            String actionCommand = event.getActionCommand();
                     ActionEvent e = new ActionEvent(this,
                                          ActionEvent.ACTION_PERFORMED,
                                          actionCommand,
                                          event.getWhen(),
                                          event.getModifiers());
             do {
                itr.next().actionPerformed(e);
            } while(itr.hasNext());
        }
    }
}
