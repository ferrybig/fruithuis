/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dutchconnected.fruithuis.frames;

import java.awt.Window;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.table.AbstractTableModel;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class EntityOverview<T> extends javax.swing.JDialog {

	private static final long serialVersionUID = -9011344244604411594L;
	
	private final List<Column<T, ?>> info = new ArrayList<>();
	private final Class<T> entity;
	private final List<T> entities = new ArrayList<>();
	private final BiFunction<? super JDialog, SessionFactory, ? extends Window> addFunction;
	private final SessionFactory connection;
	private TableModel model;

	public EntityOverview(Window parent, Class<T> entity, SessionFactory connection,
			BiFunction<? super JDialog, SessionFactory, Window> addFunction) {
		super(parent);
		this.entity = entity;
		this.addFunction = addFunction;
		this.connection = connection;
		initComponents();
	}
	
	private void refresh() {
		entities.clear();
		try (Session s = connection.openSession()) {
			entities.addAll(s.createQuery("from " + entity.getSimpleName(), entity).list());
		}
		table.setModel(model = new TableModel());
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        table.setAutoCreateRowSorter(true);
        jScrollPane1.setViewportView(table);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jButton1.setText("Geselecteerde verwijderen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BELOW_BASELINE_LEADING;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton2.setText("Toevoegen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BELOW_BASELINE_TRAILING;
        getContentPane().add(jButton2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Window other = this.addFunction.apply(this, connection);
		other.setVisible(true);
		other.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosed(WindowEvent e) {
				refresh();
			}
			
		});
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try(Session s = connection.openSession()) {
		Arrays.stream(this.table.getSelectedColumns())
				.boxed()
				.sorted(Comparator.reverseOrder())
				.peek(i -> s.delete(entities.get(i)))
				.peek(entities::remove)
				.forEach(i -> model.fireTableRowsDeleted(i, i));
		}
    }//GEN-LAST:event_jButton1ActionPerformed

	public <R> EntityOverview<T> addColumn(String name, Class<R> clazz, Function<T, R> getter) {
		info.add(new Column<>(getter, clazz, name));
		return this;
	}
	
	@Override
	public void setVisible(boolean b) {
		if(b) {
			refresh();
		}
		super.setVisible(b);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

	private static class Column<T, R> {

		private final Function<? super T, ? extends R> function;
		private final Class<R> type;
		private final String name;

		public Column(Function<? super T, ? extends R> function, Class<R> type, String name) {
			this.function = function;
			this.type = type;
			this.name = name;
		}

		public Function<? super T, ? extends R> getFunction() {
			return function;
		}

		public Class<R> getType() {
			return type;
		}

		public String getName() {
			return name;
		}
	}

	private class TableModel extends AbstractTableModel {

		public TableModel() {
		}
		private static final long serialVersionUID = -2198743459153096292L;

		@Override
		public int getRowCount() {
			return entities.size();
		}

		@Override
		public int getColumnCount() {
			return info.size();
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			return info.get(columnIndex).getFunction().apply(entities.get(rowIndex));
		}

		@Override
		public Class<?> getColumnClass(int columnIndex) {
			return info.get(columnIndex).getType();
		}

		@Override
		public String getColumnName(int column) {
			return info.get(column).getName();
		}

		@Override
		public void fireTableRowsDeleted(int firstRow, int lastRow) {
			super.fireTableRowsDeleted(firstRow, lastRow);
		}
	}
}
