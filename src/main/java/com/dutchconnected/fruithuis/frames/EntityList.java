/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dutchconnected.fruithuis.frames;

import java.awt.Point;
import java.awt.Window;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.logging.Logger;
import javax.persistence.criteria.CriteriaQuery;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.table.AbstractTableModel;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class EntityList<T> extends javax.swing.JDialog {

	private static final long serialVersionUID = -9011344244604411594L;
	
	private final List<T> entities = new ArrayList<>();
	private final SessionFactory connection;
	private TableModel model;
	private final Crud<T> crud;

	public EntityList(Window p, SessionFactory connector, Crud<T> crud) {
		super(p);
		this.connection = connector;
		this.crud = crud;
		initComponents();
	}
	private static final Logger LOG = Logger.getLogger(EntityList.class.getName());
	
	@SuppressWarnings("unchecked") // Forgive me...
	private void refresh() {
		entities.clear();
		try (Session s = connection.openSession()) {
			entities.addAll(crud.selectAll(s).list());
			LOG.info("I have " + entities.size() + " entities");
		}
		table.setModel(model = new TableModel());
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        table.setAutoCreateRowSorter(true);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jButton1.setText("Geselecteerde verwijderen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BELOW_BASELINE_LEADING;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton2.setText("Toevoegen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BELOW_BASELINE_TRAILING;
        getContentPane().add(jButton2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.crud.addAction().apply(this, connection).setVisible(true);
		refresh();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try(Session s = connection.openSession()) {
		Arrays.stream(this.table.getSelectedColumns())
				.boxed()
				.sorted(Comparator.reverseOrder())
				.peek(i -> s.delete(entities.get(i)))
				.peek(entities::remove)
				.forEach(i -> model.fireTableRowsDeleted(i, i));
		}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        Point p = evt.getPoint();
        int row = table.rowAtPoint(p);
        if (evt.getClickCount() == 2) {
            this.crud.editAction().apply(this, connection, this.entities.get(this.table.convertRowIndexToModel(row))).setVisible(true);
			refresh();
        }
    }//GEN-LAST:event_tableMouseClicked

	@Override
	public void setVisible(boolean b) {
		if(b) {
			refresh();
		}
		super.setVisible(b);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

	private static class Column<T, R> {

		private final Function<? super T, ? extends R> function;
		private final Class<R> type;
		private final String name;

		public Column(Function<? super T, ? extends R> function, Class<R> type, String name) {
			this.function = function;
			this.type = type;
			this.name = name;
		}

		public Function<? super T, ? extends R> getFunction() {
			return function;
		}

		public Class<R> getType() {
			return type;
		}

		public String getName() {
			return name;
		}
	}

	private class TableModel extends AbstractTableModel {

		public TableModel() {
		}
		private static final long serialVersionUID = -2198743459153096292L;

		@Override
		public int getRowCount() {
			return entities.size();
		}

		@Override
		public int getColumnCount() {
			return crud.getFields().size();
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			return crud.getFields().get(columnIndex).getGetter().apply(entities.get(rowIndex));
		}

		@Override
		public Class<?> getColumnClass(int columnIndex) {
			return crud.getFields().get(columnIndex).getType();
		}

		@Override
		public String getColumnName(int column) {
			return crud.getFields().get(column).getName();
		}

		@Override
		public void fireTableRowsDeleted(int firstRow, int lastRow) {
			super.fireTableRowsDeleted(firstRow, lastRow);
		}
	}
}
